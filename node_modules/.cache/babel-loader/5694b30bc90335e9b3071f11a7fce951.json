{"ast":null,"code":"var _jsxFileName = \"/Users/mykaelsss/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { TransactionProvider } from \"./components/Transactions/transactionProvider\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    const employeesPromise = employeeUtils.fetchAll();\n    employeesPromise.then(() => setIsLoading(false));\n    transactionsByEmployeeUtils.invalidateData();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    if (!employeeId) return loadAllTransactions();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(TransactionProvider, {\n    children: /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"MainContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"RampBreak--l\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n          isLoading: isLoading,\n          defaultValue: EMPTY_EMPLOYEE,\n          items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n          label: \"Filter by employee\",\n          loadingLabel: \"Loading employees\",\n          parseItem: item => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`\n          }),\n          onChange: async newValue => {\n            if (newValue === null) {\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--l\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampGrid\",\n          children: [/*#__PURE__*/_jsxDEV(Transactions, {\n            transactions: transactions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"RampButton\",\n            disabled: paginatedTransactionsUtils.loading,\n            onClick: async () => {\n              await loadAllTransactions();\n            },\n            children: \"View More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yXHk/2qvl++XLkP2SZkJsf+Vph0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","TransactionProvider","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","employeesPromise","fetchAll","then","invalidateData","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/mykaelsss/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { TransactionProvider } from \"./components/Transactions/transactionProvider\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n\n    const employeesPromise = employeeUtils.fetchAll();\n\n    employeesPromise.then(() => setIsLoading(false));\n\n    transactionsByEmployeeUtils.invalidateData();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      if (!employeeId) return loadAllTransactions()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <TransactionProvider>\n      <Fragment>\n        <main className=\"MainContainer\">\n          <Instructions />\n\n          <hr className=\"RampBreak--l\" />\n\n          <InputSelect<Employee>\n            isLoading={isLoading}\n            defaultValue={EMPTY_EMPLOYEE}\n            items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n            label=\"Filter by employee\"\n            loadingLabel=\"Loading employees\"\n            parseItem={(item) => ({\n              value: item.id,\n              label: `${item.firstName} ${item.lastName}`,\n            })}\n            onChange={async (newValue) => {\n              if (newValue === null) {\n                return\n              }\n\n              await loadTransactionsByEmployee(newValue.id)\n            }}\n          />\n\n          <div className=\"RampBreak--l\" />\n\n          <div className=\"RampGrid\">\n            <Transactions transactions={transactions} />\n\n            {transactions !== null && paginatedTransactions?.nextPage && (\n              <button\n                className=\"RampButton\"\n                disabled={paginatedTransactionsUtils.loading}\n                onClick={async () => {\n                  await loadAllTransactions()\n                }}\n              >\n                View More\n              </button>\n            )}\n          </div>\n        </main>\n      </Fragment>\n    </TransactionProvider>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}