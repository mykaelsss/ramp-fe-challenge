{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n\n  const fetchAll = _s(useCallback(_s(async () => {\n    _s();\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    const fetchMore = useCallback(async () => {\n      if (paginatedTransactions === null) {\n        return;\n      }\n\n      const response = await fetchWithCache(\"paginatedTransactions\", {\n        page: paginatedTransactions.nextPage\n      });\n      setPaginatedTransactions(previousResponse => {\n        if (response === null) {\n          return previousResponse;\n        }\n\n        return {\n          data: [...((previousResponse === null || previousResponse === void 0 ? void 0 : previousResponse.data) || []), ...response.data],\n          nextPage: response.nextPage\n        };\n      });\n    }, [fetchWithCache, paginatedTransactions]);\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: response.data,\n        nextPage: response.nextPage\n      };\n    });\n  }, \"/TwUt48SE+NbArewb2Xnm+3umrU=\"), [fetchWithCache, paginatedTransactions]), \"/TwUt48SE+NbArewb2Xnm+3umrU=\");\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s2(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","fetchMore","previousResponse","data","invalidateData"],"sources":["/Users/mykaelsss/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n      }\n    )\n\n    const fetchMore = useCallback(async () => {\n      if (paginatedTransactions === null) {\n        return;\n      }\n\n      const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n        \"paginatedTransactions\",\n        {\n          page: paginatedTransactions.nextPage,\n        }\n      );\n\n      setPaginatedTransactions((previousResponse) => {\n        if (response === null) {\n          return previousResponse;\n        }\n\n        return {\n          data: [...(previousResponse?.data || []), ...response.data],\n          nextPage: response.nextPage,\n        };\n      });\n    }, [fetchWithCache, paginatedTransactions]);\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      return { data: response.data, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;;EAIA,MAAMO,QAAQ,MAAGR,WAAW,IAAC,YAAY;IAAA;;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOA,MAAMC,SAAS,GAAGZ,WAAW,CAAC,YAAY;MACxC,IAAIM,qBAAqB,KAAK,IAA9B,EAAoC;QAClC;MACD;;MAED,MAAMG,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;QACEM,IAAI,EAAEJ,qBAAqB,CAACK;MAD9B,CAFmC,CAArC;MAOAJ,wBAAwB,CAAEM,gBAAD,IAAsB;QAC7C,IAAIJ,QAAQ,KAAK,IAAjB,EAAuB;UACrB,OAAOI,gBAAP;QACD;;QAED,OAAO;UACLC,IAAI,EAAE,CAAC,IAAI,CAAAD,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEC,IAAlB,KAA0B,EAA9B,CAAD,EAAoC,GAAGL,QAAQ,CAACK,IAAhD,CADD;UAELH,QAAQ,EAAEF,QAAQ,CAACE;QAFd,CAAP;MAID,CATuB,CAAxB;IAUD,CAtB4B,EAsB1B,CAACP,cAAD,EAAiBE,qBAAjB,CAtB0B,CAA7B;IAwBAC,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIJ,QAAQ,KAAK,IAAb,IAAqBI,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOJ,QAAP;MACD;;MAED,OAAO;QAAEK,IAAI,EAAEL,QAAQ,CAACK,IAAjB;QAAuBH,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAP;IACD,CANuB,CAAxB;EAOD,CAvC2B,mCAuCzB,CAACP,cAAD,EAAiBE,qBAAjB,CAvCyB,CAAd,iCAAd;;EAyCA,MAAMS,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDO;EAAlD,CAAP;AACD;;IApDeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}